#user  nobody;
worker_processes  1;


#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile      on;    # 开启文件的高效传输模式
    tcp_nopush    on;    # 激活 TCP_CORK socket 选择
    tcp_nodelay   on;    # 数据在传输的过程中不进缓存

    # 超时设置（避免连接长时间占用资源）
    client_body_timeout 10s;    # 请求体读取超时
    client_header_timeout 10s;  # 请求头读取超时
    send_timeout 10s;           # 发送响应超时
    keepalive_timeout 30s;      # 长连接超时时间

    # 限制请求体大小（防止大文件上传攻击）
    # 默认限制可以在单独的server或location中覆盖
    client_max_body_size 10M;

    ##### 适用于中小文件，如 100MB 以内 ####
    # 读取请求头超时：请求头通常很小，设置30s足够，过短可能误杀弱网环境请求
    # client_header_timeout 30s;

    # 读取请求体超时（上传场景）：中小文件上传，3分钟内完成较为合理
    # client_body_timeout 3m;  # 3分钟

    # 发送响应超时（下载场景）：中小文件下载，5分钟内完成较为合理
    # send_timeout 5m;  # 5分钟

    # 长连接超时：批量上传/下载时保持连接30秒，减少重连
    # keepalive_timeout 30s;

    # 其他基础配置（如请求体大小限制，配合上传场景）
    # client_max_body_size 100M;  # 根据业务调整最大上传文件大小
    ##### 适用于中小文件，如 100MB 以内 ####


    ##### 大文件场景（如 1GB 以上的上传 / 下载） ####
    # 大文件上传：请求头读取超时可保持30s（不变）
    # client_header_timeout 30s;

    # 大文件上传：允许更长时间传输（如30分钟，根据最大文件和平均速率计算）
    # 例：1GB文件，平均速率1MB/s，需约17分钟，设置30分钟留有余地
    # client_body_timeout 30m;  # 30分钟

    # 大文件下载：允许更长时间传输（如60分钟）
    # send_timeout 60m;  # 60分钟

    # 长连接超时：大文件通常单文件传输，保持30s即可；若支持断点续传可适当延长
    # keepalive_timeout 30s;

    # 配合速率限制（防止单连接占用过多带宽）
    # limit_rate_after 10m;  # 前10MB不限速，加速小文件
    # limit_rate 10m;  # 后续限制为10MB/s（根据服务器带宽调整）

    # 大文件上传需调大请求体大小限制
    # client_max_body_size 5G;  # 允许最大5GB文件上传
    ##### 大文件场景（如 1GB 以上的上传 / 下载） ####


   

    # 隐藏Nginx版本信息（防止攻击者利用特定版本漏洞）
    server_tokens off;


    # 如果使用的是cloudflare, 引用该配置，获取真实IP
    # include conf.d/cdn/cloudflare/realip.conf;


    # 速率限制（防DoS/CC攻击） 全局默认应用限制规则（所有 server 块都会继承）
    # 定义一个名为$binary_remote_addr的共享内存区域，大小10m，平均每秒允许10个请求
    limit_req_zone $binary_remote_addr zone=req_limit:10m rate=20r/s;
    # 在location配置
    # limit_req zone=req_limit;
    # limit_req zone=req_limit burst=5 nodelay;

    # 全局默认应用限制规则（所有 server 块都会继承）
    # 注意：需放在 http 块中，作为全局默认配置
    limit_req zone=req_limit burst=20 nodelay;  # 允许 10 个突发请求
    limit_req_status 429;  # 超出频率返回 429（Too Many Requests）

    # 可选：为特定场景定义额外的限制区域（如 API 专用）
    # limit_req_zone $binary_remote_addr zone=api_req_limit:10m rate=50r/s;

    # 连接限制（限制单个IP的并发连接数）全局默认应用限制规则（所有 server 块都会继承）
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    # limit_conn conn_limit 20;  # 单个IP最大20个并发连接
    # 可选：限制整个服务器的总并发连接数
    # limit_conn_zone $server_name zone=total_conn:10m;
    # limit_conn total_conn 1000;

    limit_conn conn_limit 20;  # 单个 IP 最大 10 个并发连接
    limit_conn_status 429;  # 超出连接数返回 429

    # 通用安全响应头
    add_header X-Content-Type-Options "nosniff" always;  # 防止MIME类型嗅探
    add_header X-Frame-Options "SAMEORIGIN" always;      # 防止点击劫持（只允许同域iframe嵌套）
    add_header X-XSS-Protection "1; mode=block" always;  # 启用XSS过滤，发现攻击时阻断页面
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;  # 控制Referrer信息泄露
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;" always;  # 限制资源加载来源（防XSS和数据注入）
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;  # 强制HTTPS（有效期1年，包含子域名）


    # SSL/TLS安全配置（仅HTTPS站点）
    ssl_protocols TLSv1.2 TLSv1.3;  # 禁用不安全协议（SSLv3、TLSv1、TLSv1.1）
    ssl_prefer_server_ciphers on;   # 优先使用服务器定义的加密套件
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";  # 强加密套件
    ssl_session_cache shared:SSL:10m;  # SSL会话缓存
    ssl_session_timeout 10m;           # SSL会话超时
    ssl_stapling on;                   # 启用OCSP stapling（减少SSL握手时间，验证证书有效性）
    ssl_stapling_verify on;


    # 其他站点配置
    include sites-enabled/*.conf;
    # include conf.d/*.conf;
    #gzip  on;


    # server {
    #    # 配置不允许IP访问
    #    listen 80 default_server;
    #    listen 443 default_server ssl http2;
    #    server_name _;  # 关键：不匹配任何具体域名
        
    #    # 443端口必须配置证书（可用自签名证书）
    #    ssl_certificate /path/to/default-cert.pem;
    #    ssl_certificate_key /path/to/default-key.pem;
        
    #    # 拒绝访问或跳转至有效域名
    #    return 444;  # 或return 403 或 return 301 https://yourdomain.com$request_uri;
    # }
    
    server {
        listen       8000;
        server_name  localhost;

        charset utf-8;

        #access_log  logs/host.access.log  main;

        # 应用速率限制（单个IP每秒最多10个请求，超过的放入队列等待）
        # limit_req zone=req_limit burst=20 nodelay;

        # 防止目录遍历攻击（禁止显示目录列表）
        autoindex off;

        # 引入公共目录穿越防护配置
        include conf.d/security/directory-traversal.conf;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        # 针对文件下载目录的特殊配置（如需）
        # location /downloads/ {
        #     alias /var/www/example.com/downloads/;

        #     send_timeout 60m;
        #     # 启用断点续传
        #     add_header Accept-Ranges bytes;
        #     if ($request_method = 'RANGE') {
        #       # 处理Range请求（Nginx会自动处理部分响应，无需手动实现）
        #     }

        #     # 定义允许的根目录（配合path-validation.conf使用）
        #     set $allowed_root "/var/www/example.com/downloads/";
        #     # 引入路径规范化校验
        #     include /etc/nginx/conf.d/security/path-validation.conf;
        #     # 限制允许访问的文件类型
        #     location ~* \.(zip|rar|pdf|docx)$ {
        #         try_files $uri =404;
        #     }
        # }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}