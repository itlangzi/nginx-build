name: Build Nginx from Source

on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - '.github/workflows/build-nginx.yml'
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用Ubuntu 22.04版本
    # env:
    #   NGINX_VERSION: 1.29.0
    #   PCRE2_VERSION: 10.45
    #   ZLIB_VERSION: 1.3.1
    #   OPENSSL_VERSION: 1.3.1
    #   INSTALL_PREFIX: $(pwd)/nginx
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget tar git
        
    - name: Define versions and paths
      run: |
        echo "NGINX_VERSION=1.29.0" >> $GITHUB_ENV
        echo "PCRE2_VERSION=10.45" >> $GITHUB_ENV
        echo "ZLIB_VERSION=1.3.1" >> $GITHUB_ENV
        echo "OPENSSL_VERSION=3.5.2" >> $GITHUB_ENV

        # 主安装目录
        echo "INSTALL_PREFIX=$(pwd)/nginx" >> $GITHUB_ENV

        # 自定义路径设置
        echo "CONF_PATH=$(pwd)/nginx/conf" >> $GITHUB_ENV
        echo "PID_PATH=$(pwd)/nginx/run/nginx.pid" >> $GITHUB_ENV
        echo "LOG_PATH=$(pwd)/nginx/logs" >> $GITHUB_ENV
        echo "TMP_PATH=$(pwd)/nginx/tmp" >> $GITHUB_ENV
        echo "CLIENT_BODY_TEMP_PATH=$(pwd)/nginx/tmp/client_body" >> $GITHUB_ENV
        echo "PROXY_TEMP_PATH=$(pwd)/nginx/tmp/proxy" >> $GITHUB_ENV
        echo "FASTCGI_TEMP_PATH=$(pwd)/nginx/tmp/fastcgi" >> $GITHUB_ENV
        echo "UWSGI_TEMP_PATH=$(pwd)/nginx/tmp/uwsgi" >> $GITHUB_ENV
        echo "SCGI_TEMP_PATH=$(pwd)/nginx/tmp/scgi" >> $GITHUB_ENV

        # 构建目录
        echo "BUILD_DIR=$(pwd)/build" >> $GITHUB_ENV

    - name: Create directories
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        
        mkdir -p ${{ env.CONF_PATH }}
        mkdir -p $(dirname ${{ env.PID_PATH }})
        mkdir -p ${{ env.LOG_PATH }}
        mkdir -p ${{ env.CLIENT_BODY_TEMP_PATH }}
        mkdir -p ${{ env.PROXY_TEMP_PATH }}
        mkdir -p ${{ env.FASTCGI_TEMP_PATH }}
        mkdir -p ${{ env.UWSGI_TEMP_PATH }}
        mkdir -p ${{ env.SCGI_TEMP_PATH }}
        
    - name: Download sources
      run: |
        # Download Nginx
        wget http://nginx.org/download/nginx-${{ env.NGINX_VERSION }}.tar.gz -P ${{ env.BUILD_DIR }}
        tar -zxf ${{ env.BUILD_DIR }}/nginx-${{ env.NGINX_VERSION }}.tar.gz -C ${{ env.BUILD_DIR }}
        
        # Download PCRE
        wget https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${{ env.PCRE2_VERSION }}/pcre2-${{ env.PCRE2_VERSION }}.tar.gz -P ${{ env.BUILD_DIR }}
        tar -zxf ${{ env.BUILD_DIR }}/pcre2-${{ env.PCRE2_VERSION }}.tar.gz -C ${{ env.BUILD_DIR }}
        
        # Download zlib
        wget https://github.com/madler/zlib/releases/download/v${{ env.ZLIB_VERSION }}/zlib-${{ env.ZLIB_VERSION }}.tar.gz -P ${{ env.BUILD_DIR }}
        tar -zxf ${{ env.BUILD_DIR }}/zlib-${{ env.ZLIB_VERSION }}.tar.gz -C ${{ env.BUILD_DIR }}
        
        # Download OpenSSL
        wget https://github.com/openssl/openssl/releases/download/openssl-${{ env.OPENSSL_VERSION }}/openssl-${{ env.OPENSSL_VERSION }}.tar.gz -P ${{ env.BUILD_DIR }}
        tar -zxf ${{ env.BUILD_DIR }}/openssl-${{ env.OPENSSL_VERSION }}.tar.gz -C ${{ env.BUILD_DIR }}
        
    - name: Configure Nginx for compatibility
      run: |
        cd ${{ env.BUILD_DIR }}/nginx-${{ env.NGINX_VERSION }}
        ./configure \
          --prefix=${{ env.INSTALL_PREFIX }} \
          --conf-path=${{ env.CONF_PATH }}/nginx.conf \
          --pid-path=${{ env.PID_PATH }} \
          --error-log-path=${{ env.LOG_PATH }}/error.log \
          --http-log-path=${{ env.LOG_PATH }}/access.log \
          --http-client-body-temp-path=${{ env.CLIENT_BODY_TEMP_PATH }} \
          --http-proxy-temp-path=${{ env.PROXY_TEMP_PATH }} \
          --http-fastcgi-temp-path=${{ env.FASTCGI_TEMP_PATH }} \
          --http-uwsgi-temp-path=${{ env.UWSGI_TEMP_PATH }} \
          --http-scgi-temp-path=${{ env.SCGI_TEMP_PATH }} \
          --with-pcre=${{ env.BUILD_DIR }}/pcre2-${{ env.PCRE2_VERSION }} \
          --with-zlib=${{ env.BUILD_DIR }}/zlib-${{ env.ZLIB_VERSION }} \
          --with-openssl=${{ env.BUILD_DIR }}/openssl-${{ env.OPENSSL_VERSION }} \
          --with-openssl-opt='no-shared no-tests no-makedepend' \
          --with-http_v2_module  \
          --with-http_realip_module  \
          --with-http_addition_module  \
          --with-http_sub_module  \
          --with-http_dav_module  \
          --with-http_stub_status_module  \
          --with-threads \
          --with-file-aio \
          --with-http_flv_module  \
          --with-http_mp4_module  \
          --with-http_gunzip_module  \
          --with-http_gzip_static_module  \
          --with-http_auth_request_module  \
          --with-http_random_index_module  \
          --with-http_secure_link_module  \
          --with-http_slice_module  \
          --with-mail  \
          --with-stream  \
          --with-stream_realip_module  \
          --with-stream_ssl_preread_module  \
          --with-http_ssl_module  \
          --with-mail_ssl_module  \
          --with-stream_ssl_module \
          --without-http_geo_module \
          --without-http_map_module \
          --without-http_split_clients_module \
          --without-http_userid_module \
          --without-http_auth_basic_module \
          --with-cc-opt="-O2 -fstack-protector-strong -Wformat -Werror=format-security"
        
    - name: Build Nginx
      run: |
        cd ${{ env.BUILD_DIR }}/nginx-${{ env.NGINX_VERSION }}
        make -j$(nproc)
        make install
    
    - name: Verify custom paths configuration
      run: |
        echo "Checking contents of INSTALL_PREFIX: ${{ env.INSTALL_PREFIX }}"
        ls -la ${{ env.INSTALL_PREFIX }}  # 查看安装目录是否有文件
        
        # 检查配置文件是否存在于指定路径
        ls -la ${{ env.CONF_PATH }}/nginx.conf
        
        # 检查Nginx版本和配置参数
        ${{ env.INSTALL_PREFIX }}/sbin/nginx -V
        
        # 检查临时目录结构
        ls -la ${{ env.TMP_PATH }}

        ldd ${{ env.INSTALL_PREFIX }}/sbin/nginx  # 显示依赖库版本，确认兼容性
        
    - name: Package build artifacts
      run: |
        tar -czf nginx-${{ env.NGINX_VERSION }}-linux-x86_64.tar.gz -C ${{ env.INSTALL_PREFIX }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nginx-build
        path: nginx-${{ env.NGINX_VERSION }}-linux-x86_64.tar.gz
        retention-days: 14
